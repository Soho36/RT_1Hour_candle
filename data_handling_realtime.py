import pandas as pd
from datetime import datetime
import time

# log_file_reading_interval = 1       # File reading interval (sec)

# +------------------------------------------------------------------+
# FILE TRANSMIT PATHS
# +------------------------------------------------------------------+

mt5_account_number = 828    # LAST 3 DIGITS OF MT5 ACCOUNT. MUST BE CHANGED BEFORE BUILDING EXE

# MT5 directory with OHLC log file (logging on active timeframe):

# ------------------------
# LIIKURI PATHS # HASH FOLDER MUST BE CHANGED BEFORE EXE BUILD
# mt5_logging_file_path = (
#     f'C:\\Users\\Liikurserv\\AppData\\Roaming\\MetaQuotes\\Terminal\\09FF355D73768D9CE6BDD4EE575EAB09\\MQL5\\Files\\'
#     f'OHLCVData_{mt5_account_number}.csv'
# )

# OHLC saved by NT8
nt8_logging_file_path = f'C:\\Users\\Liikurserv\\PycharmProjects\\RT_Ninja\\OHLCVData_1.csv'

# File with signal generated by Python script
nt8_buy_sell_signals_for_path = (
     f'C:\\Users\\Liikurserv\\PycharmProjects\\RT_Ninja\\trade_signal.txt'
     )

list_of_orders_path = 'C:\\Users\\Liikurserv\\PycharmProjects\\RT_Ninja\\list_of_orders.csv'

position_state_longs_path = 'position_state_longs.txt'
position_state_shorts_path = 'position_state_shorts.txt'

current_order_direction_path = 'C:\\Users\\Liikurserv\\PycharmProjects\\RT_Ninja\\current_order_direction.txt'

current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')


def leave_only_last_line():     # Clear file before starting the script
    with open(nt8_logging_file_path, 'r', encoding='utf-8') as file:
        lines = file.readlines()
        # Check if there's at least one line to keep
        if lines:
            with open(nt8_logging_file_path, 'w', encoding='utf-8') as file:
                file.write(lines[-1])  # Write only last several lines back to file
        else:
            print('Reading OHLC. File is empty...')


def get_dataframe_from_file(max_time_waiting_for_entry):

    log_df = pd.read_csv(
        nt8_logging_file_path,
        sep=';',
        encoding='utf-8',
        engine='python'
    )
    new_column_names = ['Ticker', 'Timeframe', 'Date', 'Time', 'Open', 'High', 'Low', 'Close', 'Volume']
    log_df.columns = new_column_names
    log_df['Datetime'] = pd.to_datetime(log_df['Date'] + ' ' + log_df['Time'], format='ISO8601')
    log_df.set_index('Datetime', inplace=True)
    dataframe_from_log = log_df.loc[:, ['Ticker', 'Date', 'Time', 'Open', 'High', 'Low', 'Close']]
    datetime_index = log_df.index
    last_date = str(datetime_index[-1])     # Get datetime of the first row of dataframe to pass along with levels

    return dataframe_from_log, last_date


# Tracks if there is an open position
def get_position_state_shorts():
    with open(position_state_shorts_path, 'r', encoding='utf-8') as file:
        state = file.read()
        return state


def get_position_state_longs():
    with open(position_state_longs_path, 'r', encoding='utf-8') as file:
        state = file.read()
        return state


def get_current_pending_order_direction():
    with open(current_order_direction_path, 'r', encoding='utf-8') as file:
        current_pending_order = file.read().strip()
        return current_pending_order


def save_order_parameters_to_file(line_order_parameters):   # Called from orders_sender.py
    retries = 5
    for attempt in range(retries):
        try:
            with open(nt8_buy_sell_signals_for_path, 'w', encoding='utf-8') as file:
                file.writelines(line_order_parameters)
                print(f"NEW ORDER IS SUCCESSFULLY SAVED TO FILE")
            break
        except PermissionError:
            print(f"Attempt {attempt + 1} failed. Retrying...")
            time.sleep(1)
    else:
        print("Failed to write to the file after multiple attempts.")


# Create orders list file to track orders
def save_list_of_orders_to_file(line_order_parameters_to_order_list):
    with open(list_of_orders_path, 'w', encoding='utf-8') as file:
        file.writelines(line_order_parameters_to_order_list)


def get_last_order_time_from_file():
    with open(list_of_orders_path, 'r', encoding='utf-8') as file:
        last_order_timestamp = pd.to_datetime(file.read())
        if pd.isna(last_order_timestamp):
            last_order_timestamp = pd.to_datetime('2024-01-01 00:00:00')  # Default value while the file is empty

        return last_order_timestamp
